datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String   @unique
  password String
  role     UserRole @default(USER)

  verifiedAt DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cart Cart?

  orders Order[]

  verificationCode VerificationCode?

  provider   String?
  providerId String?

  @@index([email])
}

model Cart {
  id Int @id @default(autoincrement())

  totalPrice Float @default(0)

  userToken String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId Int?  @unique

  cartItem CartItem[]

  @@index([userToken])
}

model CartItem {
  id Int @id @default(autoincrement())

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart   Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId Int

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  ingredients Ingredient[]

  @@index([cartId])
  @@index([productItemId])
}

model Order {
  id Int @id @default(autoincrement())

  userToken  String
  paymentId  String?
  totalPrice Float       @default(0)
  status     OrderStatus
  items      Json
  fullName   String
  address    String
  email      String
  phone      String
  comment    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId Int?

  @@index([userToken])
  @@index([status])
  @@index([createdAt])
}

model Category {
  id Int @id @default(autoincrement())

  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@index([name])
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String
  price    Float
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  cartItem CartItem[]

  @@index([name])
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingredients Ingredient[]

  productItems ProductItem[]

  @@index([name])
  @@index([categoryId])
}

model ProductItem {
  id Int @id @default(autoincrement())

  price Float
  size  Int?
  dough Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  cartItems CartItem[]

  @@index([productId])
}

model VerificationCode {
  id Int @id @default(autoincrement())

  code String

  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  @@unique([userId, code])
}

model Story {
  id Int @id @default(autoincrement())

  previewImageUrl String

  createdAt DateTime @default(now())

  items StoryItem[]

  @@index([createdAt])
}

model StoryItem {
  id Int @id @default(autoincrement())

  sourceUrl String

  createdAt DateTime @default(now())

  story   Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId Int

  @@index([storyId])
}
